/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "sigs.k8s.io/kwok/pkg/apis/v1alpha1"
)

// FakeClusterLogs implements ClusterLogsInterface
type FakeClusterLogs struct {
	Fake *FakeKwokV1alpha1
}

var clusterlogsResource = v1alpha1.SchemeGroupVersion.WithResource("clusterlogs")

var clusterlogsKind = v1alpha1.SchemeGroupVersion.WithKind("ClusterLogs")

// Get takes name of the clusterLogs, and returns the corresponding clusterLogs object, and an error if there is any.
func (c *FakeClusterLogs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ClusterLogs, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterlogsResource, name), &v1alpha1.ClusterLogs{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLogs), err
}

// List takes label and field selectors, and returns the list of ClusterLogs that match those selectors.
func (c *FakeClusterLogs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ClusterLogsList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterlogsResource, clusterlogsKind, opts), &v1alpha1.ClusterLogsList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterLogsList{ListMeta: obj.(*v1alpha1.ClusterLogsList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterLogsList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterLogs.
func (c *FakeClusterLogs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterlogsResource, opts))
}

// Create takes the representation of a clusterLogs and creates it.  Returns the server's representation of the clusterLogs, and an error, if there is any.
func (c *FakeClusterLogs) Create(ctx context.Context, clusterLogs *v1alpha1.ClusterLogs, opts v1.CreateOptions) (result *v1alpha1.ClusterLogs, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusterlogsResource, clusterLogs), &v1alpha1.ClusterLogs{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLogs), err
}

// Update takes the representation of a clusterLogs and updates it. Returns the server's representation of the clusterLogs, and an error, if there is any.
func (c *FakeClusterLogs) Update(ctx context.Context, clusterLogs *v1alpha1.ClusterLogs, opts v1.UpdateOptions) (result *v1alpha1.ClusterLogs, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusterlogsResource, clusterLogs), &v1alpha1.ClusterLogs{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLogs), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterLogs) UpdateStatus(ctx context.Context, clusterLogs *v1alpha1.ClusterLogs, opts v1.UpdateOptions) (*v1alpha1.ClusterLogs, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(clusterlogsResource, "status", clusterLogs), &v1alpha1.ClusterLogs{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLogs), err
}

// Delete takes name of the clusterLogs and deletes it. Returns an error if one occurs.
func (c *FakeClusterLogs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clusterlogsResource, name, opts), &v1alpha1.ClusterLogs{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterLogs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusterlogsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterLogsList{})
	return err
}

// Patch applies the patch and returns the patched clusterLogs.
func (c *FakeClusterLogs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterLogs, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusterlogsResource, name, pt, data, subresources...), &v1alpha1.ClusterLogs{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterLogs), err
}
